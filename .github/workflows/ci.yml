name: Python Package CI/CD

on:
  push:
    branches:
      - main
    tags:
      - '*-dev'
  pull_request:
    branches:
      - main
  release:
    types:
      - created

jobs:

  version-matrix:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
      poetry-versions: ${{ steps.set-matrix.outputs.poetry-versions }}
    steps:
      - name: Set matrix versions
        id: set-matrix
        run: |
          echo 'python-versions=["3.12.3"]' >> $GITHUB_OUTPUT
          echo 'poetry-versions=["1.8.3"]' >> $GITHUB_OUTPUT

  build-and-test:
    if: github.actor != 'csmark-cicd-bot[bot]'
    runs-on: ubuntu-latest
    needs: version-matrix
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
        poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}
    # services:
    #   postgres-vector:
    #     image: pgvector/pgvector:16
    #     env:
    #       POSTGRES_DB: dev
    #       POSTGRES_USER: dev
    #       POSTGRES_PASSWORD: dev
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      # - name: Run tests
      #   run: |
      #     cp .env.example .env
      #     poetry run pytest

      - name: Run build
        run: poetry build

  bump-version:
    if: github.ref == 'refs/heads/main' && github.actor != 'csmark-cicd-bot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      id-token: 'write'
    needs:
      - version-matrix
      - build-and-test
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
        poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}
    steps:
      - name: ðŸ‘¤ Authenticaticate With GitHub App
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PEM }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Bump version
        id: bump_version
        run: |
          git config --local user.name "csmark-cicd-bot[bot]"
          git config --local user.email "csmark-cicd-bot[bot]@users.noreply.github.com"
          poetry run bump-my-version bump pre_n
          VERSION=$(poetry version -s)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Bumped version to $VERSION"

      - name: Push version commit & tags
        run: |
          git push origin HEAD --tags

  # build-and-publish-dev:
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && endsWith(github.ref, '-dev')
  #   runs-on: ubuntu-latest
  #   needs:
  #     - version-matrix
  #     - build-and-test
  #   strategy:
  #     matrix:
  #       python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
  #       poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #
  #     - name: Install Poetry
  #       uses: abatilo/actions-poetry@v2
  #       with:
  #         poetry-version: ${{ matrix.poetry-version }}
  #
  #     - name: Cache Poetry packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/pypoetry
  #         key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
  #         restore-keys: ${{ runner.os }}-poetry-
  #
  #     - name: Install non-python dependencies
  #       run: sudo apt-get install graphviz graphviz-dev libpq-dev -y
  #
  #     - name: Install dependencies
  #       run: poetry install

      # - name: Authenticate to GCP
      #   id: google-auth
      #   uses: google-github-actions/auth@v2
      #   with:
      #     project_id: ${{ secrets.GCP_PROJECT_ID }}
      #     workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      #     service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      #
      # - name: 'Set up Google Cloud SDK'
      #   uses: 'google-github-actions/setup-gcloud@v2'
      #
      # - name: Publish to GCP PyPI Artifact Registry
      #   run: |
      #     poetry config repositories.google-acr https://${{ vars.GCP_ARTIFACT_REGISTRY_LOCATION }}-python.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/
      #     poetry config http-basic.google-acr oauth2accesstoken $(gcloud auth print-access-token)
      #     poetry publish --repository google-acr

  handle-release-publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
        poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}
    needs:
      - version-matrix
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Set version to release
        run: |
          VERSION=${{ github.event.release.tag_name }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          poetry version $VERSION

      - name: Install dependencies
        run: poetry install

      - name: Pull main branch and tag
        run: |
          git config --local user.name "objective-applications-cicd[bot]"
          git config --local user.email "objective-applications-cicd[bot]@users.noreply.github.com"
          echo one
          cat pyproject.toml | grep version
          cat pyproject.toml | grep current_version
          git pull origin main
          echo two
          cat pyproject.toml | grep version
          cat pyproject.toml | grep current_version
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          sed -i "s/^current_version = .*/current_version = \"$VERSION\"/" pyproject.toml
          echo three
          cat pyproject.toml | grep version
          cat pyproject.toml | grep current_version
          poetry run bump-my-version bump patch
          echo four
          cat pyproject.toml | grep version
          cat pyproject.toml | grep current_version
          git add pyproject.toml
          git commit -m "Release version: $VERSION"
          git push origin HEAD
