name: Python Package CI/CD

on:
  push:
    branches:
      - main
      - 'refs/tags/*-dev'
  pull_request:
    branches:
      - main
  release:
    types:
      - created

jobs:

  version-matrix:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
      poetry-versions: ${{ steps.set-matrix.outputs.poetry-versions }}
    steps:
      - name: Set matrix versions
        id: set-matrix
        run: |
          echo 'python-versions=["3.12.3"]' >> $GITHUB_OUTPUT
          echo 'poetry-versions=["1.8.3"]' >> $GITHUB_OUTPUT

  build-and-test:
    runs-on: ubuntu-latest
    needs: version-matrix
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
        poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      # - name: Run tests
      #   run: poetry run pytest

      - name: Run build
        run: poetry build

  bump-version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
        poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Determine version bump type
        id: determine_version
        run: |
          VERSION_BUMP=patch
          BASE_COMMIT=$(git merge-base HEAD origin/main)
          COMMITS=$(git rev-list $BASE_COMMIT..HEAD)
          for COMMIT in $COMMITS; do
            COMMIT_MESSAGE=$(git log -1 --pretty=%B $COMMIT)
            echo "Commit message: $COMMIT_MESSAGE"
            if echo "$COMMIT_MESSAGE" | grep -q '#major'; then
              VERSION_BUMP=major
              break
            elif echo "$COMMIT_MESSAGE" | grep -q '#minor'; then
              VERSION_BUMP=minor
            fi
          done
          echo "VERSION_BUMP=$VERSION_BUMP" >> $GITHUB_ENV
          echo "Determined version bump type: $VERSION_BUMP"

      - name: Bump version
        id: bump_version
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          poetry run bump-my-version bump ${{ env.VERSION_BUMP }}
          VERSION=$(poetry version -s)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Bumped version to $VERSION"

      - name: Push version commit & tags
        run: |
          git push origin HEAD --tags

  build-and-publish-dev:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && endsWith(github.ref, '-dev')
    runs-on: ubuntu-latest
    needs:
      - version-matrix
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.version-matrix.outputs.python-versions) }}
        poetry-version: ${{ fromJSON(needs.version-matrix.outputs.poetry-versions) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install non-python dependencies
        run: sudo apt-get install graphviz graphviz-dev libpq-dev -y

      - name: Install dependencies
        run: poetry install

      - name: Authenticate to GCP
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Publish to GCP PyPI Artifact Registry
        run: |
          poetry config repositories.google-acr https://${{ vars.GCP_ARTIFACT_REGISTRY_LOCATION }}-python.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/
          poetry config http-basic.google-acr oauth2accesstoken $(gcloud auth print-access-token)
          poetry publish --build --repository google-acr

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifact-${{ github.sha }}
          path: dist/
          retention-days: 90

  retag-and-publish-release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package-artifact-${{ github.event.release.target_commitish }}
          path: ./dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.3

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.3

      - name: Authenticate to GCP
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Retag artifact
        run: |
          VERSION=${{ github.event.release.tag_name }}
          poetry config repositories.google-acr https://${{ vars.GCP_ARTIFACT_REGISTRY_LOCATION }}-python.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/
          poetry config http-basic.google-acr oauth2accesstoken $(gcloud auth print-access-token)
          poetry publish --build --repository google-acr --version $VERSION

      - name: Upload Retagged Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifact-${{ github.event.release.tag_name }}
          path: dist/
          retention-days: 90
